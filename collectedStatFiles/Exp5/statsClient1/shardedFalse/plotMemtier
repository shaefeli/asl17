#!/usr/bin/env python
import numpy as np
import matplotlib.pyplot as plt

#Utility function:
def find_nearest_index(array,value):
    #idx = (np.abs(array-value)).argmin()
    idx = np.where(np.abs(array-value) == np.abs(array-value).min())
    return idx[len(idx)-1][0]


mGetSize=[1,3,6,9]

setThroughput=np.empty(len(mGetSize))
setLatency=np.empty(len(mGetSize))
setThroughputB=np.empty(len(mGetSize))

getThroughput=np.empty(len(mGetSize))
getLatency=np.empty(len(mGetSize))
getThroughputB=np.empty(len(mGetSize))
getHits=np.empty(len(mGetSize))
getMisses=np.empty(len(mGetSize))

totalThroughput=np.empty(len(mGetSize))
totalLatency=np.empty(len(mGetSize))
totalThroughputB=np.empty(len(mGetSize))
totalHits=np.empty(len(mGetSize))
totalMisses=np.empty(len(mGetSize))

getHistOneSeconds=[]
getHistOnePercents=[]
getHistogramSeconds =[]
getHistogramPercents =[]

statFile = open('client01inst1_sharded0_rep1.txt','r');
mGs=0;
isReadingGet = False;
for line in statFile:
	if "Sets" in line:
		words = line.split(" ")
		wordsF = [a for a in words if a!='']
		setThroughput[mGs]=float(wordsF[1]);
		setLatency[mGs]=float(wordsF[4]);
		setThroughputB[mGs]=float(wordsF[5]);
	elif "Gets" in line:
		words = line.split(" ")
		wordsF = [a for a in words if a!='']
		getThroughput[mGs]=float(wordsF[1]);
		getHits[mGs]=float(wordsF[2]);
		getMisses[mGs]=float(wordsF[3]);
		getLatency[mGs]=float(wordsF[4]);
		getThroughputB[mGs]=float(wordsF[5]);	
	elif "Totals" in line:
		words = line.split(" ")
		wordsF = [a for a in words if a!='']
		totalThroughput[mGs]=float(wordsF[1]);
		totalHits[mGs]=float(wordsF[2]);
		totalMisses[mGs]=float(wordsF[3]);
		totalLatency[mGs]=float(wordsF[4]);
		totalThroughputB[mGs]=float(wordsF[5]);
		mGs+=1
	elif "GET" in line:
		isReadingGet = True
		words = line.split(" ")
		wordsF = [a for a in words if a!='']
		getHistOneSeconds.append(float(wordsF[1]))
		getHistOnePercents.append(float(wordsF[2]))
	elif isReadingGet:
		isReadingGet=False
		getHistogramSeconds.append(getHistOneSeconds)
		getHistogramPercents.append(getHistOnePercents)
		getHistOneSeconds=[]
		getHistOnePercents=[]


percentiles25=np.empty(len(mGetSize))
percentiles50=np.empty(len(mGetSize))
percentiles75=np.empty(len(mGetSize))
percentiles90=np.empty(len(mGetSize))
percentiles99=np.empty(len(mGetSize))

for i in range(0,len(mGetSize)):
	id25=find_nearest_index(np.array(getHistogramPercents[i]),25)
	percentiles25[i]= getHistogramSeconds[i][id25]
	id50=find_nearest_index(np.array(getHistogramPercents[i]),50)
	percentiles50[i]=getHistogramSeconds[i][id50]
	id75=find_nearest_index(np.array(getHistogramPercents[i]),75)
	percentiles75[i]=getHistogramSeconds[i][id75]
	id90=find_nearest_index(np.array(getHistogramPercents[i]),90)
	percentiles90[i]=getHistogramSeconds[i][id90]
	id99=find_nearest_index(np.array(getHistogramPercents[i]),99)
	percentiles99[i]=getHistogramSeconds[i][id99]


mGetSizeString=["1","3","6","9"]
N=len(mGetSize)
ind=np.arange(N)
differences1 = [percentiles50[i]-percentiles25[i] for i in range(len(percentiles50))]
differences2 = [percentiles75[i]-percentiles50[i] for i in range(len(percentiles50))]
differences3 = [percentiles90[i]-percentiles75[i] for i in range(len(percentiles75))]
differences4 = [percentiles99[i]-percentiles90[i] for i in range(len(percentiles90))]
		
toPlot = getLatency
title = "Get Latency on one client"
xlabel = "multi get size"
ylabel = "latency [ms]"
bar_width=0.35
p1 = plt.bar(ind, percentiles25, width=bar_width, color='g')
p2 = plt.bar(ind, differences1, width=bar_width, bottom=percentiles25, color='c')
p3 = plt.bar(ind, differences2, width=bar_width, bottom=percentiles50, color='y')
p4 = plt.bar(ind, differences3, width=bar_width, bottom=percentiles75, color='r')
p5 = plt.bar(ind, differences4, width=bar_width, bottom=percentiles90, color='m')
plt.plot(mGetSizeString ,toPlot , linewidth=3)
plt.title(title)
plt.xlabel(xlabel)
plt.ylabel(ylabel)
#plt.xticks(ind, mGetSizeString)
plt.legend((p1[0], p2[0],p3[0],p4[0],p5[0]), ('25%', '25%','25%','15%','9%'))
plt.savefig('latency')
plt.close()

toPlot = getThroughput
title = "Throughput on one client"
xlabel = "mGet size"
ylabel = "throughput [ops/s]"
bar_width=0.2
plt.figure()
plt.bar(mGetSizeString,toPlot,bar_width,color='b')
plt.title(title)
plt.xlabel(xlabel)
plt.ylabel(ylabel)
plt.savefig('throughput')
plt.close()

#Histogram:
plt.figure()
nrBins=10;
valPerBin=[]
for i in range(0,len(mGetSize)):
	threshold = 50/getThroughput[i]
	maxId = find_nearest_index(np.diff(getHistogramPercents[i]),threshold) 
	rangeHist = getHistogramSeconds[i][maxId]-np.min(np.array(getHistogramSeconds[i]))
	bins= np.arange(np.min(np.array(getHistogramSeconds[i])),getHistogramSeconds[i][maxId],rangeHist/nrBins)
	binsString=[]
	for j in range(0,len(bins)-1):
		#binsString.append(str(bins[j])+'-'+str(bins[j+1]))
		binsString.append(bins[j])
	valPerBinOneSize=[]	
	for e in range(0,len(bins)-1):
		lower=bins[e]
		upper=bins[e+1]
		idl = find_nearest_index(np.array(getHistogramSeconds[i]),lower)
		idu = find_nearest_index(np.array(getHistogramSeconds[i]),upper)
		percUpper = getHistogramPercents[i][idu]
		percLower = getHistogramPercents[i][idl]
		valPerBinOneSize.append(((percUpper-percLower)/100)*getThroughput[i])
	valPerBin.append(valPerBinOneSize)
	plt.bar(binsString,valPerBinOneSize,bar_width)
	plt.xlabel("response time [ms]")
	plt.ylabel("Number of requests")
	plt.title("Non sharded - Client")
	plt.savefig('histogram'+str(mGetSizeString[i]))
	plt.close()
	valPerBinOneSize=[]	




						
